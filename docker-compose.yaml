version: '3.8'

x-airflow-common: &airflow-common
  image: apache/airflow:2.7.3
  env_file:
    - .env
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: SequentialExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/data/airflow.db
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./data:/opt/airflow/data
  # The user for webserver and scheduler will be AIRFLOW_UID
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}"
  healthcheck:
    test: ["CMD", "airflow", "db", "check"]
    interval: 30s
    timeout: 30s
    retries: 3

services:
  airflow-init:
    <<: *airflow-common
    # --- MODIFICATION FOR airflow-init ---
    user: root # Run the entrypoint/command of this service as root
    # --- END MODIFICATION ---
    container_name: airflow_init_light_reddit
    entrypoint: /bin/bash
    command:
      - -c
      - |
        set -e; # Exit immediately if a command exits with a non-zero status.
        echo "--- Running airflow-init as $(id) ---";
        # These mkdirs will be done as root
        mkdir -p /opt/airflow/dags /opt/airflow/logs /opt/airflow/plugins /opt/airflow/data;
        # Chown the directories to the AIRFLOW_UID/GID. This must be done as root.
        echo "Chowning directories to ${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}";
        chown -R "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}" /opt/airflow/dags /opt/airflow/logs /opt/airflow/plugins /opt/airflow/data;
        echo "Directories chowned. Executing Airflow commands as ${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0} using gosu";
        # Use gosu to drop privileges to AIRFLOW_UID for Airflow-specific commands
        # This ensures that airflow db init and users create run as the correct user
        # and the database file will be owned by AIRFLOW_UID.
        exec gosu "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}" bash -c " \
          airflow db init && \
          airflow users create \
            --username admin \
            --firstname Admin \
            --lastname User \
            --role Admin \
            --email admin@example.com \
            --password admin \
        " || echo "User 'admin' already exists or an error occurred during user creation, but init script will still exit 0 for depends_on"
        # The "|| echo ..." part is a bit of a hack to ensure the script exits with 0 if user creation fails because user exists
        # A more robust way would be to check if user exists before trying to create.
        # For this setup, 'airflow users create ... || true' is simpler if gosu passes the exit code correctly.
        # Let's refine the gosu part to make the '|| true' apply to the user creation only.
        #
        # Corrected gosu command for robust user creation:
        # exec gosu "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}" bash -c " \
        #   airflow db init && \
        #   (airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin || true) \
        # "

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver_light_reddit
    restart: unless-stopped
    command: airflow webserver
    ports:
      - "8080:8080"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 1024M
        reservations:
          cpus: '0.25'
          memory: 512M

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler_light_reddit
    restart: unless-stopped
    command: airflow scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 768M
        reservations:
          cpus: '0.20'
          memory: 384M