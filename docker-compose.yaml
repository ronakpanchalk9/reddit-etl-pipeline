version: '3.8' # Using a slightly newer version for more features, 3 is fine too

x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile # Ensure this Dockerfile is optimized (see notes below)
  # image: custom-airflow:2.7.1-python3.9 # Use this if you pre-build and tag the image
  env_file:
    - airflow.env # We'll put executor and other settings here
  volumes:
    # Essential volumes
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    # Optional, if you need to persist data generated by DAGs
    - ./data:/opt/airflow/data 
    # Configuration files if any, beyond airflow.cfg which is managed by env vars
    - ./config:/opt/airflow/config 
    # If you have custom etls, pipelines, utils, tests as Python modules imported by DAGs
    # Ensure these are lightweight or consider adding them to PYTHONPATH via Dockerfile
    - ./etls:/opt/airflow/etls
    - ./pipelines:/opt/airflow/pipelines
    - ./utils:/opt/airflow/utils
    - ./tests:/opt/airflow/tests # Usually not needed for production runs
    # requirements.txt is best handled during image build
    # - ./requirements.txt:/opt/airflow/requirements.txt 
  depends_on:
    postgres:
      condition: service_healthy # Wait for postgres to be ready
  user: "${AIRFLOW_UID:-50000}" # Run as non-root, set AIRFLOW_UID in .env or here

services:
  postgres:
    image: postgres:13-alpine # Lighter alpine version, 12-alpine is also fine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: airflow_reddit
      # POSTGRES_PORT: 5432 # Default, not strictly needed here
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "airflow_reddit"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - postgres_db_volume:/var/lib/postgresql/data # Persist postgres data
    deploy: # For resource limits in swarm mode, or use 'mem_limit', 'cpus' for non-swarm
      resources:
        limits:
          cpus: '0.75' # Limit CPU usage
          memory: 768M  # Limit RAM usage

  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    # Ensure requirements are installed in the Dockerfile for the main image.
    # This init step can then focus on db init and user creation.
    command:
      - -c
      - |
        # This first command checks if the database is initialized by looking for a specific table.
        # If not initialized, it proceeds with db init and user creation.
        # This makes the init container idempotent.
        if ! airflow db check-migrations -t 60; then
          echo "Database not initialized. Initializing..."
          airflow db init
          airflow db upgrade
          airflow users create \
            --username admin \
            --firstname admin \
            --lastname admin \
            --role Admin \
            --email airflow@airflow.com \
            --password admin
        else
          echo "Database already initialized."
        fi
    restart: "no" # Should only run once
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    depends_on: # Make sure init runs first, and postgres is healthy
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0' # Webserver can be a bit bursty
          memory: 1.5G # Give it some memory, adjust based on DAG complexity/UI usage

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname $(hostname) --limit 1 --allow-multiple"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    depends_on: # Make sure init runs first, and postgres is healthy
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.5' # Scheduler + LocalExecutor tasks run here
          memory: 2G   # Main resource consumer with LocalExecutor


volumes:
  postgres_db_volume: # Define the named volume for postgres persistence